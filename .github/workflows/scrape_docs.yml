# 1. Create a folder named ".github" in the root of your repository.
# 2. Inside that folder, create another folder named "workflows".
# 3. Inside "workflows", create a new file named "scrape_docs.yml" and paste this content into it.

name: Scrape Pine Script Docs

# --- TRIGGERS ---
# This workflow will run on two conditions:
on:
  # 1. On a schedule: Runs every Sunday at midnight UTC.
  schedule:
    - cron: '0 0 * * 0'
  # 2. Manually: Allows you to run it anytime from the "Actions" tab in GitHub.
  workflow_dispatch:

# --- JOB DEFINITION ---
# A workflow is made up of one or more jobs.
jobs:
  scrape:
    # The type of virtual machine to run the job on.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository code
      # This downloads your scraper.py and requirements.txt to the runner.
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      # Installs Python on the virtual machine.
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      # Runs pip install based on your requirements.txt file.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Install Playwright Browsers (FIX)
      # This new step downloads the necessary browser executable (e.g., Chromium).
      - name: Install Playwright Browsers
        run: playwright install

      # Step 5: Run the scraper script
      # This executes your Python script, which creates/updates the knowledge_base folder.
      - name: Run Python scraper
        run: python scraper.py

      # Step 6: Commit and push changes
      # This step checks if the scraper created any new or updated files in the
      # knowledge_base directory and commits them back to your repository.
      - name: Commit and push if there are changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add knowledge_base/
          # The following command will exit with 1 if there are no changes, so we handle that.
          git diff --quiet && git diff --staged --quiet || (git commit -m "Automated documentation scrape" && git push)
